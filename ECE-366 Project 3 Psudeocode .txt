#$3 = FA(Hash)
push $3, 0x3
push $3, 0x3
push $3, 0x2
push $3, 0x2

$2 = 0(Counter)
push $2, 0x1

Loop:
#0 = After fold
hfold $0, $3, $2

#Store the contents of R0 in R(R2+3)
sb $0, 3($2)

$Jump neq x???
jneq $0, 0x0
lbi $1, 0($0)
addi $1, 0x1
sb $1, 0($0)

jneq $0, 0x1
lbi $1, 0($0)
addi $1, 0x1
sb $1, 0($0)

jneq $0, 0x2
lbi $1, 0($0)
addi $1, 0x1
sb $1, 0($0)

jneq $0, 0x3
lbi $1, 0($0)
addi $1, 0x1
sb $1, 0($0)

#Increment Counter
addi $2, 0x1

jneq $2, 0x0

#Jump 
jmpb loop1

-----------------------------------------------------------------------------------
$? = Rail

hfold - 000 x(rd) xx(rt) xx(rs)
addi - 001 0(X) xx(rt) yy(imm)
push - 010 0(X) xx(rt) yy(imm)
jneq - 011 0(X) xx(rt) yy(imm)
sb - 100 x(rd) xx(rt) yy(imm)
lbi - 110 x(rt) xx(rs) yy(imm)
jmpb - 111 xxxxx(imm)

$0 - Output of Hash and Fold
$1 - Store and Load
$2 - Counter
$3 - 3[Hash number]
---------------------------------------------------------------------------------------
ALU
1. Main for Push and Immediates
2. Special for hfoldR0
3. PCBranch/Jump
-----------------------------------------------------
Control Unit Rails
MemtoRegDst
MemWrite
Branch(imm jump 4)
ALUControl[1:0]
RegWrite
Hash
LoadByteCon
